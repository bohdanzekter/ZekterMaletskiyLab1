#pragma once
#include <vector>
#include <utility>
#include <iostream>
#include <random>

class Dominoes
{
	unsigned __int64 n = -1;
	std::vector<std::vector<bool>> dominoes{n + 1, std::vector<bool>(n + 1, false) };
	std::pair<int, int> table = createRandTile();
	int sharedPart = -1;
	
public:	

	void enterN()
	{
		std::cout << "Enter n: ";
		std::cin >> n;
		n++;							//to include number 'n' itself
		std::cout << std::endl;
	}

	void show_matrix()
	{
		for (auto it : dominoes)
		{
			for (auto it1: it)
			{
				std::cout << it1 << " ";
			}
			std::cout << std::endl;
		}
	}

	void insert(int first, int second)				// word pair fucking disappeared
	{
		dominoes[first][second] = true;
		dominoes[second][first] = true;

	}

	void insert(std::pair<int, int> pair)
	{
		dominoes[pair.first][pair.second] = true;
		dominoes[pair.second][pair.first] = true;
	}
	
	void erase(int first, int second)
	{
		dominoes[first][second] = false;
		dominoes[second][first] = false;
	}

#pragma region SixSeven


	/*
	++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ = ----------:::::---- - ::----------------:: :
		++++++++++++++++++++++++++++++++++++++++++++++++++++++++ += -------------------- - ::----------------:: :
		++++++++++++++++++++++++++++++++++++++++++++++++++++++++ = --------------:: : ---- - ::---------- - ::::::::
		++++++++++++++++++++++++++++++++++++++++++++++++++++++++-------------- - :: : ---- - ::---------- - ::::::::
		++++++++++++++++++++++++++++++++++++++++++++++++++++++ == ------------::--------------------::------::
		++++++++++++++++++++++++++++++++++++++++++++++++++++++ = ---------- - ::::---------------- - :::: : ------::
		++++++++++++++++++++++++++++++++++++++++++++++++++++ += -- : ------------------:::::::: : ------------::::
		++++++++++++++++++++++++++++++++++++++++++++++++++ = += ----------------------:::::::: : ------------::::
		++++++++++++++++++++ += ++++ += ++++++++++++++++++++++++---- - :: : ------ - ::::----::---------------------- -
		++++++++++++++++++==== += *# % @@@@ % # * ++++++++++++++++ + ------:::::::::::::-::::::--------:: : ------------
		++++++++++++++++++++ + % @@@@@@@@@@@@@@@#++++++++++++ = ------#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ = -::---- -
		++++++++++++++++++ * @@@@@@@@@@@@@@@@@@@@ % ++++++++ += -:---- = #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ = --:-::::
		++++++++++++++++ + % @@@@@@@@#++++#@@@@@@@@ % *++++ = += --------#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ = --:::::-
		++++++++++++++ + *@@@@@@@@@ *= ++++ + @@@@@@@@@ % *++++ + -------- - #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ = --------
		++++++++++++++#@@@@@@@@@#++++++ + @@@@@@@@@@#++++ = -------- - #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ = --::---- -
		++++++++++++ + #@@@@@@@@@ % ++++++++@@@@@@@@@@#++ += ----------#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ + ----------
		++++++++++++#@@@@@@@@@@++++++++ + % @@@@@@@@ % ++ += ---------- - #@@@@ * ----:::::::::::--:: + @@@@@ + ----::---- -
		++++++++++ + *%@@@@@@@@@ % ++++++++++#@@@@@@#++ += ------------#@@@ = -:-------------- : --+ @@@@@ * --::----:::-
		++++++++++ + #@@@@@@@@@@++++++++++++++ * *++++++ - :---------- - #@@@------:::---------- + @@@@@#-- - ::::::::::
		++++++++++ * @@@@@@@@@@@++++++++++++++++++ += = --------------------:-------------- - +@@@@@ % -:--::--::--::
	      ++++++++++#@@@@@@@@@@ % ++++++++++++++++++++ = ---------------------------------- - +@@@@@@---- - ::--::--::
		++++++++++ % @@@@@@@@@@#++++++ * ### * ++ = ++++ += ---------------------------------- - +@@@@@@ + -:------------ :
		++++++++ + *@@@@@@@@@@@ *= +*%@@@@@@@@@ % %+= += ---------------------------------- - +@@@@@@# - :::---- - ::---- -
		++++++++ + #@@@@@@@@@@@ + #@@@@@@@@@@@@@@@ % #---------------------------------- - +@@@@@@ %= ----------------
		++++++++ + #@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@# = ---------------------------- - :--= % @@@@@@ + ----------:::::: -
		++++++++ + % @@@@@@@@@@@@@@#++++#@@@@@@@@@@@@ + -------------------------- - :: - +% @@@@@@#-------------- - :: -
		++++++++ + @@@@@@@@@@@@@@++++++++@@@@@@@@@@@ %= ---------------------------- = #@@@@@@@ * --------::---- - :: -
		++++++++ + @@@@@@@@@@@@@++++++++ + #@@@@@@@@@@@# += ========------------ - :---- * @@@@@@@#---- - :: - :::::::::::
		++++++++ + @@@@@@@@@@@@ % ++ = ++++++ + @@@@@@@@@@@@ * ++++++++ = :------------ : -: -+@@@@@@@@ * ----:::-:::::::::: :
		++++++++ + @@@@@@@@@@@@#++++++++++@@@@@@@@@@@@ * ++++ += ++---------------- -= @@@@@@@@ %= --------:::---- - :: :
		++++++++ + % @@@@@@@@@@@ * ++++++++++ % @@@@@@@@@@@#++++++ + ------------------@@@@@@@@@#--:::--------:: - ::::
		++++++++ + % @@@@@@@@@@@ * ++++++++++#@@@@@@@@@@@#++++ += ------------------ % @@@@@@@@@ * ------------:::---- -
		++++++++ + #@@@@@@@@@@@ * ++++++++++#@@@@@@@@@@@#++++ += ----------------:#@@@@@@@@@ %= ------------:::---- -
		++++++++ + *@@@@@@@@@@@ * += ++++++++#@@@@@@@@@@@#++++ = --------------:--+ @@@@@@@@@@ % ----------:::-:::::: -
		++++++++++@@@@@@@@@@@ * ++++++++++#@@@@@@@@@@@ * ++ = += -:------------ - : -% @@@@@@@@@@#:-------- - :::::::::: :
		++++++++++#@@@@@@@@@@#++++++++++ % @@@@@@@@@@@ * ++ == ---------------- - *@@@@@@@@@@@ + ---------- - :::::---- -
		++++++++++ * @@@@@@@@@@ % ++++++++++@@@@@@@@@@@ % ++ += ---------------- - +% @@@@@@@@@@@ = ---------- - :::::---- -
		= ++++++++++#@@@@@@@@@ % ++++++++++@@@@@@@@@@@ * ++ + ------------------ * @@@@@@@@@@@@ = ------::------:::::::
	++++++++++ + *%@@@@@@@@@ * ++++++++#@@@@@@@@@@#++ + ------------------ = % @@@@@@@@@@@@------ - ::------:::::::
	++++++++++++ * %@@@@@@@@@ = ++++++ + @@@@@@@@@@ % ++ += ---------------- - :+@@@@@@@@@@@@@------------------ - :::
	++++++++++++ + *@@@@@@@@@ % ++++++@@@@@@@@@@ % ++ += ------------------ - +@@@@@@@@@@@@@------------------ - :::
	++++++++++++++ + % @@@@@@@@@ % ## % @@@@@@@@@@ % ++++-------------------- * @@@@@@@@@@@@ % ----------------------
		++++++++++++++++ + % @@@@@@@@@@@@@@@@@@@ % += = ++-------------------- - +@@@@@@@@@@@@ + ----------------------
		= ++++++++++++++++++#@@@@@@@@@@@@@@@#++++++ = ---------------------- * @@@@@@@@@@ + ---------------------- -
		++++++++++++++++++++++ + **##### * ++++ += ++++ = ------------------:::---- = *%@@ % *= --------------:::::::::::
	++++++++++++++++++++++++++++++++++++++++ = ---------------------------------------------- - ::::::::::::
		++++++++++++++++++++++++++++++++++++++ += = ------ - : ---------- : --- ::------ - :::: : --------:::::::::::::: :
		++++++++++++++++++++++++++++++++++++++ += -- : --------------:: : ------------------ - ::---- - :::::::: : ---- -
		++++++++++++++++++++++++++++++++++++++ = -: ----------------:: : --------------------------::::::::::::::
		++++++++++++++++++++++++++++++++++++ += ----------------:::::::: : --------::::::---- - ::::::::::::::::::
		++++++++++++++++++++++++++++++++++++ + -: -------------------- : ---------- - ::------------:::::::::::::: :
		++++++++++++++++++++++++++++++++++++ = -------- - :: : ----------::::------::::------:::::::::::::::::::: :
		++++++++++++++++++++++++++++++++++ += ------------ : ----------::------ - :::: : -------- - ::::::::::::::::::
		++++++++++++++++++++++++++++++++++ = ------------ - :::: : --::------ - :::::::::::: : ------:::::::::::::::: -
		++++++++++++++++++++++++++++++++ == = --------------::::--:::::::::::: : -: --::---------- : ---- - ::::::::--
		*/
#pragma endregion

	void erase(std::pair<int, int> pair)
	{
		dominoes[pair.first][pair.second] = false;
		dominoes[pair.second][pair.first] = false;
	}

	std::pair<int, int> createRandTile()
	{
		return { rand() % n, rand() % n };
	}

	std::pair<int, int> operator() () {
		std::pair <int, int> newTile;
		while (true)
		{
			newTile = createRandTile();
			if (!dominoes[newTile.first][newTile.second] and !sharesPart(table, newTile))
				continue;
			else
			{
				this->insert(newTile.first, newTile.second);
				changeTable(newTile);
				break;
			}
		}
		return { newTile.first, newTile.second };
	}

	void dealDominoes()
	{
		for (size_t i = 0; i < n; i++)
		{
			operator()();
			show_pair(table);					
		}
	}

	std::string show_pair(std::pair<int,int> a)
	{
		std::cout << a.first << " " << a.second << std::endl;
	}

	bool sharesPart(const std::pair<int, int>& a, const std::pair<int, int>& b) {
		return (a.first == b.first) or
			(a.first == b.second) or
			(a.second == b.first) or
			(a.second == b.second);
	}

	void changeTable(const std::pair<int, int>& a)
	{
		if (a.first == table.first)
		{
			table = { table.second, a.second };
		}
		else if (a.first == table.second)
		{
			table = {table.first, a.second};
		}
		else if (a.second == table.first)
		{
			table = {table.second, a.first};
		}
		else if (a.second == table.second)
		{
			table = {table.first, a.first};
		}
	}



};

